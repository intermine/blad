// Generated by CoffeeScript 1.3.3
(function() {
  var CONFIG, DB, LOG, Q, SITE_PATH, blad, connect, crypto, domain, eco, flatiron, fs, mongodb, request, setup, union, urlib, utils, winston, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  flatiron = require('flatiron');

  union = require('union');

  connect = require('connect');

  mongodb = require('mongodb');

  request = require('request');

  crypto = require('crypto');

  urlib = require('url');

  fs = require('fs');

  eco = require('eco');

  Q = require('q');

  domain = require('domain');

  winston = require('winston');

  _ = require('underscore')._;

  utils = require('./utils.js');

  exports.db = utils.db;

  CONFIG = {};

  DB = null;

  SITE_PATH = null;

  LOG = null;

  blad = {
    'types': {}
  };

  setup = function(SERVICE) {
    SERVICE.use(flatiron.plugins.http, {
      'before': CONFIG.middleware.concat([
        connect.favicon(), connect["static"](__dirname + '/public'), function(req, res, next) {
          var _ref;
          if (req.url.match(new RegExp("^/api", 'i'))) {
            if (!(req.headers['x-blad-apikey'] != null)) {
              res.writeHead(403);
              res.write('`X-Blad-ApiKey` needs to be provided in headers of all API requests');
              return res.end();
            } else {
              if (_ref = req.headers['x-blad-apikey'], __indexOf.call(CONFIG.browserid.hashes, _ref) >= 0) {
                return next();
              } else {
                res.writeHead(403);
                res.write('Invalid `X-Blad-ApiKey` authorization');
                return res.end();
              }
            }
          } else {
            return next();
          }
        }
      ]),
      'onError': function(err, req, res) {
        LOG.error(err.message);
        if (err.status === 404 && (req.url.match(new RegExp("^/admin", 'i')) != null)) {
          return res.redirect('/admin', 301);
        } else {
          return union.errorHandler(err, req, res);
        }
      }
    });
    SERVICE.use({
      name: 'eco-templating',
      attach: function(options) {
        return SERVICE.eco = function(path, data, cb) {
          return fs.readFile("" + SITE_PATH + "/src/types/" + path + ".eco", "utf8", function(err, template) {
            if (err) {
              return cb(err, null);
            } else {
              try {
                return cb(null, eco.render(template, data));
              } catch (e) {
                return cb(e, null);
              }
            }
          });
        };
      }
    });
    SERVICE.use({
      name: 'mongodb',
      attach: function(options) {
        return SERVICE.db = function(done) {
          var collection;
          collection = function(done) {
            return DB.collection(CONFIG.env, function(err, coll) {
              if (err) {
                throw err;
              }
              return done(coll);
            });
          };
          if (DB == null) {
            LOG.debug('Connect to MongoDB');
            return mongodb.Db.connect(CONFIG.mongodb, function(err, connection) {
              var mcfg;
              if (err) {
                throw err;
              }
              mcfg = connection.serverConfig;
              LOG.info('Connected to ' + ("mongodb://" + mcfg.host + ":" + mcfg.port + "/" + mcfg.dbInstance.databaseName).bold);
              DB = connection;
              return collection(done);
            });
          } else {
            return collection(done);
          }
        };
      }
    });
    SERVICE.router.path("/auth", function() {
      return this.post(function() {
        var _this = this;
        return request.post({
          'url': CONFIG.browserid.provider,
          'form': {
            'assertion': this.req.body.assertion,
            'audience': "http://" + this.req.headers.host
          }
        }, function(error, response, body) {
          var _ref;
          if (error) {
            throw error;
          }
          body = JSON.parse(body);
          if (body.status === 'okay') {
            if (_ref = body.email, __indexOf.call(CONFIG.browserid.users, _ref) >= 0) {
              LOG.info("Identity verified for " + body.email);
              _this.res.writeHead(200, 'application/json');
              _this.res.write(JSON.stringify({
                'email': body.email,
                'key': crypto.createHash('md5').update(body.email + CONFIG.browserid.salt).digest('hex')
              }));
            } else {
              LOG.warn("" + body.email + " tried to access the API");
              _this.res.writeHead(403, 'application/json');
              _this.res.write(JSON.stringify({
                'message': "Your email " + body.email + " is not authorized to access the admin backend"
              }));
            }
          } else {
            LOG.error(body.message);
            _this.res.writeHead(403, 'application/json');
            _this.res.write(JSON.stringify(body));
          }
          return _this.res.end();
        });
      });
    });
    SERVICE.router.path("/sitemap.xml", function() {
      return this.get(function() {
        var _this = this;
        LOG.info('Get sitemap.xml');
        return SERVICE.db(function(collection) {
          return collection.find({
            'public': true
          }).toArray(function(err, docs) {
            var doc, xml, _i, _len;
            if (err) {
              throw err;
            }
            xml = ['<?xml version="1.0" encoding="utf-8"?>', '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'];
            for (_i = 0, _len = docs.length; _i < _len; _i++) {
              doc = docs[_i];
              xml.push("<url><loc>http://" + _this.req.headers.host + doc.url + "</loc><lastmod>" + doc.modified + "</lastmod></url>");
            }
            xml.push('</urlset>');
            _this.res.writeHead(200, {
              "content-type": "application/xml"
            });
            _this.res.write(xml.join("\n"));
            return _this.res.end();
          });
        });
      });
    });
    SERVICE.router.path("/api/documents", function() {
      return this.get(function() {
        var _this = this;
        LOG.info('Get all documents');
        return SERVICE.db(function(collection) {
          return collection.find({}, {
            'sort': 'url'
          }).toArray(function(err, docs) {
            if (err) {
              throw err;
            }
            _this.res.writeHead(200, {
              "content-type": "application/json"
            });
            _this.res.write(JSON.stringify(docs));
            return _this.res.end();
          });
        });
      });
    });
    SERVICE.router.path("/api/document", function() {
      var editSave;
      this.get(function() {
        var params, query, value,
          _this = this;
        params = urlib.parse(this.req.url, true).query;
        if (!(params._id != null) && !(params.url != null)) {
          this.res.writeHead(404, {
            "content-type": "application/json"
          });
          this.res.write(JSON.stringify({
            'message': 'Use `_id` or `url` to fetch the document'
          }));
          return this.res.end();
        } else {
          if (params._id != null) {
            try {
              value = mongodb.ObjectID.createFromHexString(params._id);
            } catch (e) {
              this.res.writeHead(404, {
                "content-type": "application/json"
              });
              this.res.write(JSON.stringify({
                'message': 'The `_id` parameter is not a valid MongoDB id'
              }));
              this.res.end();
              return;
            }
            query = {
              '_id': value
            };
          } else {
            value = decodeURIComponent(params.url);
            query = {
              'url': value
            };
          }
          LOG.info("Get document " + value);
          return SERVICE.db(function(collection) {
            return collection.findOne(query, function(err, doc) {
              if (err) {
                throw err;
              }
              _this.res.writeHead(200, {
                "content-type": "application/json"
              });
              _this.res.write(JSON.stringify(doc));
              return _this.res.end();
            });
          });
        }
      });
      editSave = function() {
        var cb, doc,
          _this = this;
        doc = this.req.body;
        if (doc._id != null) {
          LOG.info("Edit document " + doc._id);
          doc._id = mongodb.ObjectID.createFromHexString(doc._id);
          cb = function() {
            return _this.res.writeHead(200, {
              "content-type": "application/json"
            });
          };
        } else {
          LOG.info('Create new document');
          cb = function() {
            return _this.res.writeHead(201, {
              "content-type": "application/json"
            });
          };
        }
        return blad.save(doc, function(err, reply) {
          if (err) {
            LOG.error('I am different...');
            _this.res.writeHead(400, {
              "content-type": "application/json"
            });
            _this.res.write(JSON.stringify(reply));
            return _this.res.end();
          } else {
            if (doc["public"]) {
              LOG.info('Mapping url ' + reply.underline);
              SERVICE.router.path(reply, blad.get);
            }
            return SERVICE.db(function(collection) {
              return collection.findOne({
                'url': reply
              }, function(err, doc) {
                if (err) {
                  throw err;
                }
                cb();
                _this.res.write(JSON.stringify(doc));
                return _this.res.end();
              });
            });
          }
        });
      };
      this.post(editSave);
      this.put(editSave);
      return this["delete"](function() {
        var params, query, value,
          _this = this;
        params = urlib.parse(this.req.url, true).query;
        if (!(params._id != null) && !(params.url != null)) {
          this.res.writeHead(404, {
            "content-type": "application/json"
          });
          this.res.write(JSON.stringify({
            'message': 'Use `_id` or `url` to specify the document'
          }));
          return this.res.end();
        } else {
          if (params._id != null) {
            try {
              value = mongodb.ObjectID.createFromHexString(params._id);
            } catch (e) {
              this.res.writeHead(404, {
                "content-type": "application/json"
              });
              this.res.write(JSON.stringify({
                'message': 'The `_id` parameter is not a valid MongoDB id'
              }));
              this.res.end();
              return;
            }
            query = {
              '_id': value
            };
          } else {
            value = decodeURIComponent(params.url);
            query = {
              'url': value
            };
          }
          LOG.info("Delete document " + value);
          return SERVICE.db(function(collection) {
            return collection.findAndModify(query, [], {}, {
              'remove': true
            }, function(err, doc) {
              if (err) {
                throw err;
              }
              if (doc) {
                blad.unmap(doc.url);
                _this.res.writeHead(200, {
                  "content-type": "application/json"
                });
                return _this.res.end();
              } else {
                _this.res.writeHead(404, {
                  "content-type": "application/json"
                });
                return _this.res.end();
              }
            });
          });
        }
      });
    });
    blad.save = function(doc, cb) {
      var m;
      if (doc.url[0] !== '/') {
        doc.url = '/' + doc.url;
      }
      if (doc.url.length > 1 && doc.url.slice(-1) === '/') {
        doc.url = doc.url.slice(0, -1);
      }
      if (doc.url.match(new RegExp("^/admin|^/api|^/auth|^/sitemap.xml", 'i')) != null) {
        return cb(true, {
          'url': 'Is in use by core application'
        });
      } else {
        try {
          decodeURIComponent(doc.url);
          m = doc.url.match(new RegExp(/^\/(\S*)$/));
        } catch (e) {

        }
        if (!m) {
          return cb(true, {
            'url': 'Does that look valid to you?'
          });
        } else {
          return SERVICE.db(function(collection) {
            var _this = this;
            if (doc["public"] != null) {
              switch (doc["public"]) {
                case 'true':
                  doc["public"] = true;
                  break;
                case 'false':
                  doc["public"] = false;
              }
            }
            doc.modified = (new Date()).toJSON();
            if (doc._id != null) {
              return collection.find({
                '$or': [
                  {
                    'url': doc.url
                  }, {
                    '_id': doc._id
                  }
                ]
              }).toArray(function(err, docs) {
                var old, _id;
                if (err) {
                  throw err;
                }
                if (docs.length !== 1) {
                  return cb(true, {
                    'url': 'Is in use already'
                  });
                } else {
                  old = docs.pop();
                  if (old["public"]) {
                    blad.unmap(old.url);
                  }
                  _id = doc._id;
                  delete doc._id;
                  return collection.update({
                    '_id': _id
                  }, {
                    '$set': doc
                  }, {
                    'safe': true
                  }, function(err) {
                    if (err) {
                      throw err;
                    }
                    return cb(false, doc.url);
                  });
                }
              });
            } else {
              return collection.find({
                'url': doc.url
              }).toArray(function(err, docs) {
                if (err) {
                  throw err;
                }
                if (docs.length !== 0) {
                  return cb(true, {
                    'url': 'Is in use already'
                  });
                } else {
                  return collection.insert(doc, {
                    'safe': true
                  }, function(err, records) {
                    if (err) {
                      throw err;
                    }
                    return cb(false, records[0].url);
                  });
                }
              });
            }
          });
        }
      }
    };
    blad.get = function() {
      return this.get(function() {
        var _this = this;
        return SERVICE.db(function(collection) {
          var url;
          url = urlib.parse(_this.req.url, true).pathname.toLowerCase();
          return collection.find({
            'url': new RegExp('^' + url)
          }, {
            'sort': 'url'
          }).toArray(function(err, docs) {
            var d, doom, record, t;
            if (err) {
              throw err;
            }
            if (!(record = docs[0])) {
              throw 'Bad request URL, need to get a pathname only';
            }
            if (docs.length > 1) {
              record._children = (function() {
                var _i, _len, _ref, _results;
                _ref = docs.slice(1, docs.length);
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  d = _ref[_i];
                  _results.push(d);
                }
                return _results;
              })();
            }
            LOG.debug('Render url ' + (record.url || record._id).underline);
            if (blad.types[record.type]) {
              doom = domain.create();
              doom.on('error', function(err) {
                var t;
                try {
                  LOG.error(t = "Error occurred, sorry: " + err);
                  _this.res.writeHead(500);
                  _this.res.end(t);
                  return _this.res.on('close', function() {
                    return doom.dispose();
                  });
                } catch (err) {
                  return doom.dispose();
                }
              });
              return doom.run(function() {
                var presenter;
                presenter = new blad.types[record.type](record, SERVICE);
                return presenter.render(function(context, template) {
                  var accept, key, part, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
                  if (template == null) {
                    template = true;
                  }
                  accept = (_ref = _this.req) != null ? (_ref1 = _ref.headers) != null ? _ref1.accept : void 0 : void 0;
                  if (accept) {
                    _ref2 = accept.split(';');
                    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                      part = _ref2[_i];
                      if (part.indexOf('application/json') !== -1) {
                        template = false;
                      }
                    }
                  }
                  if (template) {
                    return SERVICE.eco("" + record.type + "/template", context, function(err, html) {
                      if (err) {
                        _this.res.writeHead(500);
                        _this.res.write(err.message);
                        return _this.res.end();
                      } else {
                        context = _.extend({
                          'page': html
                        }, context);
                        return SERVICE.eco('layout', context, function(err, layout) {
                          _this.res.writeHead(200, {
                            'content-type': 'text/html'
                          });
                          _this.res.write(err ? html : layout);
                          return _this.res.end();
                        });
                      }
                    });
                  } else {
                    _ref3 = ['store', 'service'];
                    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
                      key = _ref3[_j];
                      delete context[key];
                    }
                    _this.res.writeHead(200, {
                      'content-type': 'application/json'
                    });
                    _this.res.write(JSON.stringify(context));
                    return _this.res.end();
                  }
                });
              });
            } else {
              LOG.warn(t = "Document type " + record.type + " not one of " + (Object.keys(blad.types).join(', ')));
              _this.res.writeHead(500);
              _this.res.write(t);
              return _this.res.end();
            }
          });
        });
      });
    };
    return blad.unmap = function(url) {
      var i, parts, r, _i, _ref, _results;
      LOG.info('Delete url ' + url.underline);
      if (url === '/') {
        return delete SERVICE.router.routes.get;
      } else {
        r = SERVICE.router.routes;
        parts = url.split('/');
        _results = [];
        for (i = _i = 1, _ref = parts.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
          if (i + 1 === parts.length) {
            _results.push(r[parts.pop()].get = void 0);
          } else {
            _results.push(r = r[parts[i]]);
          }
        }
        return _results;
      }
    };
  };

  blad.Type = (function() {

    Type.prototype.menu = function(cb) {
      var _this = this;
      return this.service.db(function(collection) {
        return collection.find({
          'url': new RegExp("^\/([^/|\s]*)$")
        }, {
          'sort': 'url'
        }).toArray(function(err, docs) {
          if (err) {
            throw err;
          }
          return cb(docs);
        });
      });
    };

    Type.prototype.children = function(n) {
      var child, _i, _len, _ref, _results;
      if (!this._children) {
        return {};
      }
      if (n != null) {
        _ref = this._children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if ((this.url === '/' ? child.url : child.url.replace(this.url, '')).split('/').length === n + 2) {
            _results.push(child);
          }
        }
        return _results;
      } else {
        return this._children;
      }
    };

    Type.prototype.siblings = function(cb) {
      var end, parts, url,
        _this = this;
      parts = this.url.split('/');
      url = parts.slice(0, -1).join('/');
      end = parts.slice(-1);
      return this.service.db(function(collection) {
        return collection.find({
          'url': new RegExp('^' + url.toLowerCase() + ("\/(?!\/|" + end + ").*"))
        }, {
          'sort': 'url'
        }).toArray(function(err, docs) {
          if (err) {
            throw err;
          }
          return cb(docs || []);
        });
      });
    };

    Type.prototype.parent = function(cb) {
      var parts, url,
        _this = this;
      parts = this.url.split('/');
      if (!(parts.length > 2)) {
        return cb({});
      }
      url = parts.slice(0, -1).join('/');
      return this.service.db(function(collection) {
        return collection.find({
          'url': new RegExp('^' + url.toLowerCase())
        }, {
          'sort': 'url'
        }).toArray(function(err, docs) {
          if (err) {
            throw err;
          }
          if (!(docs.length > 0)) {
            return cb({});
          }
          return cb(docs[0]);
        });
      });
    };

    Type.prototype.render = function(done) {
      return done({});
    };

    function Type(params, service) {
      var key, value,
        _this = this;
      this.service = service;
      for (key in params) {
        value = params[key];
        if (key !== 'store' && key !== 'menu' && key !== 'children' && key !== 'siblings' && key !== 'parent' && key !== 'render' && key !== 'constructor' && key !== 'service') {
          this[key] = value;
        }
      }
      this.store = {
        get: function(key, obj) {
          var _ref, _ref1, _ref2;
          if (obj != null) {
            return (_ref = obj.cache[key]) != null ? _ref.value : void 0;
          } else {
            return (_ref1 = _this.cache) != null ? (_ref2 = _ref1[key]) != null ? _ref2.value : void 0 : void 0;
          }
        },
        save: function(key, value, done) {
          var _ref;
          if ((_ref = _this.cache) == null) {
            _this.cache = {};
          }
          _this.cache[key] = {
            'value': value,
            'modified': (new Date()).toJSON()
          };
          return _this.service.db(function(collection) {
            return collection.update({
              '_id': _this._id
            }, {
              '$set': {
                'cache': _this.cache
              }
            }, {
              'safe': true
            }, function(err) {
              if (err) {
                throw err;
              }
              return done();
            });
          });
        },
        isOld: function(key, ms, interval) {
          if (interval == null) {
            interval = 'ms';
          }
          switch (interval) {
            case 's':
            case 'second':
            case 'seconds':
              ms = 1e3 * ms;
              break;
            case 'm':
            case 'minute':
            case 'minutes':
              ms = 6e4 * ms;
              break;
            case 'h':
            case 'hour':
            case 'hours':
              ms = 3.6e6 * ms;
              break;
            case 'd':
            case 'day':
            case 'days':
              ms = 28.64e7 * ms;
              break;
            case 'w':
            case 'week':
            case 'weeks':
              ms = 6.048e8 * ms;
              break;
            case 'm':
            case 'month':
            case 'months':
              ms = 1.8144e10 * ms;
          }
          if ((_this.cache != null) && (_this.cache[key] != null)) {
            return new Date().getTime() - ms > new Date(_this.cache[key].modified).getTime();
          } else {
            return true;
          }
        }
      };
    }

    return Type;

  })();

  blad.types.BasicDocument = (function(_super) {

    __extends(BasicDocument, _super);

    function BasicDocument() {
      return BasicDocument.__super__.constructor.apply(this, arguments);
    }

    BasicDocument.prototype.render = function(done) {
      return done(this, false);
    };

    return BasicDocument;

  })(blad.Type);

  exports.blad = blad;

  exports.start = function(cfg, dir, done) {
    var compile, config, include, map, na, startup, validate, welcome, ya;
    welcome = function() {
      var def;
      def = Q.defer();
      LOG.info("Welcome to " + 'blad'.grey);
      fs.readFile("" + __dirname + "/logo.txt", function(err, data) {
        var line, _i, _len, _ref;
        if (err) {
          def.reject(err);
        }
        _ref = data.toString('utf-8').split('\n');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          LOG.help(line.cyan.bold);
        }
        LOG.help('');
        LOG.help('A forms based Node.js CMS');
        LOG.help('');
        return def.resolve();
      });
      return def.promise;
    };
    config = function() {
      LOG.debug('Duplicate config');
      return CONFIG = JSON.parse(JSON.stringify(cfg));
    };
    validate = function() {
      var email, suffix, use, _i, _len, _ref, _ref1, _ref2;
      LOG.debug('Validate config');
      CONFIG.mongodb = process.env.DATABASE_URL || CONFIG.mongodb;
      CONFIG.port = process.env.PORT || CONFIG.port;
      CONFIG.env = process.env.NODE_ENV || 'documents';
      if ((_ref = CONFIG.browserid) == null) {
        CONFIG.browserid = {};
      }
      CONFIG.browserid.salt = process.env.API_SALT || CONFIG.browserid.salt;
      if ((_ref1 = CONFIG.middleware) == null) {
        CONFIG.middleware = [];
      }
      if (!(CONFIG.browserid != null) || !(CONFIG.browserid.provider != null) || !(CONFIG.browserid.salt != null) || !(CONFIG.browserid.users != null) || !CONFIG.browserid.users instanceof Array) {
        throw 'You need to create a valid `browserid` section';
      }
      if (!(CONFIG.mongodb != null)) {
        throw 'You need to specify the `mongodb` uri';
      }
      CONFIG.browserid.hashes = [];
      _ref2 = CONFIG.browserid.users;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        email = _ref2[_i];
        CONFIG.browserid.hashes.push(crypto.createHash('md5').update(email + CONFIG.browserid.salt).digest('hex'));
      }
      use = function(pkg) {
        switch (pkg) {
          case 'connect-baddies':
            return require(pkg)();
          default:
            throw new Error("Unknown middleware `" + pkg + "`");
        }
      };
      return CONFIG.middleware = (function() {
        var _j, _len1, _ref3, _results;
        _ref3 = CONFIG.middleware;
        _results = [];
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          suffix = _ref3[_j];
          _results.push(use('connect-' + suffix));
        }
        return _results;
      })();
    };
    compile = function() {
      LOG.debug('Compile code, copy public site files');
      utils.log(function(message) {
        return LOG.debug(message);
      });
      return Q.all([utils.compile.admin(), utils.compile.forms(SITE_PATH), utils.copy["public"](SITE_PATH), utils.include.presenters(SITE_PATH)]);
    };
    include = function(_arg) {
      var f, key, p, presenters, req, undefineds, _i, _j, _len, _results;
      undefineds = 2 <= _arg.length ? __slice.call(_arg, 0, _i = _arg.length - 1) : (_i = 0, []), presenters = _arg[_i++];
      LOG.debug('Including custom presenters: ' + ((function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = presenters.length; _j < _len; _j++) {
          f = presenters[_j];
          _results.push((p = f.split('/'), p[p.length - 2]));
        }
        return _results;
      })()).join(', '));
      _results = [];
      for (_j = 0, _len = presenters.length; _j < _len; _j++) {
        f = presenters[_j];
        req = require(f);
        key = Object.keys(req)[0];
        _results.push(blad.types[key] = req[key]);
      }
      return _results;
    };
    startup = function() {
      var def, service;
      LOG.debug('Setup & start ' + 'flatiron'.grey);
      def = Q.defer();
      service = flatiron.app;
      setup(service);
      service.start(CONFIG.port, function(err) {
        if (err) {
          return def.reject(err);
        } else {
          return def.resolve(service);
        }
      });
      return def.promise;
    };
    map = function(service) {
      var def;
      LOG.debug('Map existing documents');
      def = Q.defer();
      service.db(function(collection) {
        return collection.find({
          'public': true
        }).toArray(function(err, docs) {
          var doc, _i, _len;
          if (err) {
            def.reject(err);
          }
          for (_i = 0, _len = docs.length; _i < _len; _i++) {
            doc = docs[_i];
            LOG.info('Mapping url ' + doc.url.underline);
            service.router.path(doc.url, blad.get);
          }
          return def.resolve(service);
        });
      });
      return def.promise;
    };
    ya = function(service) {
      LOG.debug('Done');
      LOG.info('Listening on port ' + service.server.address().port.toString().bold);
      LOG.info('blad'.grey + ' started ' + 'ok'.green.bold);
      if (done && typeof done === 'function') {
        return done(service);
      }
    };
    na = function(err) {
      try {
        err = JSON.parse(err);
        return LOG.error(err.error.message || err.message || err);
      } catch (e) {
        return LOG.error(err);
      }
    };
    if (process.env.NODE_ENV !== 'test') {
      winston.cli();
      winston.add(winston.transports.File, {
        'filename': "" + __dirname + "/blad.log"
      });
      LOG = winston;
      SITE_PATH = dir;
      return Q.fcall(welcome).then(config).then(validate).then(compile).then(include).then(startup).then(map).done(ya, na);
    } else {
      winston.loggers.add('dummy', {
        'console': {
          'silent': true
        }
      });
      LOG = winston.loggers.get('dummy');
      return Q.fcall(config).then(startup).done(ya, na);
    }
  };

}).call(this);
